#Introduction of Database Normalization

->Database normalization is the process of organizing the attributes of the database to reduce or 
  eliminate data redundancy (having the same data but at different places).


#Problems because of data redundancy
->Data redundancy unnecessarily increases the size of the database as the same data is repeated in many places. 
->Inconsistency problems also arise during insert, delete and update operations.


#		1. First Normal Form –

->If a relation contain composite or multi-valued attribute, it violates first normal form or a relation is in first 
  normal form if it does not contain any composite or multi-valued attribute.

->A relation is in first normal form if every attribute in that relation is singled valued attribute.

Example: Name colummn must contain only single-valued(attribute),not contain two names.

Example:

ID   Name   Courses
------------------
1    A      c1, c2
2    E      c3
3    M      C2, c3


In the above table Course is a multi valued attribute so it is not in 1NF.

Below Table is in 1NF as there is no multi valued attribute

ID   Name   Course
------------------
1    A       c1
1    A       c2
2    E       c3
3    M       c2 


#				2. Second Normal Form –

->To be in second normal form, a relation must be in first normal form and relation must not contain any partial dependency.
  A relation is in 2NF if it has No Partial Dependency, i.e., no non-prime attribute (attributes which are not part of any candidate key)
  is dependent on any proper subset of any candidate key of the table.

Partial Dependency – If the proper subset of candidate key determines non-prime attribute, it is called partial dependency.


Example 1 – Consider table-3 as following below.

STUD_NO            COURSE_NO        COURSE_FEE
1                     C1                  1000
2                     C2                  1500
1                     C4                  2000
4                     C3                  1000
4                     C1                  1000
2                     C5                  2000

{Note that, there are many courses having the same course fee. }

Here,
COURSE_FEE cannot alone decide the value of COURSE_NO or STUD_NO;
COURSE_FEE together with STUD_NO cannot decide the value of COURSE_NO;
COURSE_FEE together with COURSE_NO cannot decide the value of STUD_NO;
Hence,
COURSE_FEE would be a non-prime attribute, as it does not belong to the one only candidate key {STUD_NO, COURSE_NO} ;
But, COURSE_NO -> COURSE_FEE , i.e., COURSE_FEE is dependent on COURSE_NO, which is a proper subset of the candidate key. Non-prime attribute COURSE_FEE is dependent on a proper subset of the candidate key, which is a partial dependency and so this relation is not in 2NF.

To convert the above relation to 2NF,
we need to split the table into two tables such as :
Table 1: STUD_NO, COURSE_NO
Table 2: COURSE_NO, COURSE_FEE

Table 1                                    Table 2
STUD_NO            COURSE_NO          COURSE_NO                COURSE_FEE     
1                 C1                  C1                        1000
2                 C2                  C2                        1500
1                 C4                  C3                        1000
4                 C3                  C4                        2000
4                 C1                  C5                        2000

NOTE: 2NF tries to reduce the redundant data getting stored in memory. 
For instance, if there are 100 students taking C1 course, we dont need to store its Fee as 1000 for all the 100 records, 
instead once we can store it in the second table as the course fee for C1 is 1000.




        