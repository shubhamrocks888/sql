		1.)The SQL SELECT DISTINCT Statement:

->The SELECT DISTINCT statement is used to return only distinct (different) values.

Syntax: SELECT DISTINCT column1, column2, ...
	FROM table_name;

Example:
SELECT COUNT(DISTINCT Country) FROM Customers;

		2.)SQL AND, OR and NOT Operators:

#AND Syntax
SELECT column1, column2, ...
FROM table_name
WHERE condition1 AND condition2 AND condition3 ...;

#OR Syntax
SELECT column1, column2, ...
FROM table_name
WHERE condition1 OR condition2 OR condition3 ...;

#NOT Syntax
SELECT column1, column2, ...
FROM table_name
WHERE NOT condition;


		3.)SQL ORDER BY Keyword:

The ORDER BY keyword sorts the records in ascending order by default.

#ORDER BY Syntax
SELECT column1, column2, ...
FROM table_name
ORDER BY column1, column2, ... ASC|DESC;


#ORDER BY Several Columns Example
The following SQL statement selects all customers from the "Customers" table, 
sorted by the "Country" and the "CustomerName" column. This means that it orders by Country, 
but if some rows have the same Country, it orders them by CustomerName:

SELECT * FROM Customers
ORDER BY Country, CustomerName;


		4.)SQL INSERT INTO Statement:

#INSERT INTO Syntax
INSERT INTO table_name (column1, column2, column3, ...)
VALUES (value1, value2, value3, ...);


		5.)SQL UPDATE Statement:

#UPDATE Syntax
UPDATE table_name
SET column1 = value1, column2 = value2, ...
WHERE condition;


#Note: Be careful when updating records in a table! Notice the WHERE clause in the UPDATE statement. 
The WHERE clause specifies which record(s) that should be updated. 
If you omit the WHERE clause, all records in the table will be updated!

#Update Warning!
->Be careful when updating records. If you omit the WHERE clause, ALL records will be updated!


		6.)The SQL IN Operator

->The IN operator allows you to specify multiple values in a WHERE clause.
->The IN operator is a shorthand for multiple OR conditions.

#IN Syntax
SELECT column_name(s)
FROM table_name
WHERE column_name IN (value1, value2, ...);

	'OR'

SELECT column_name(s)
FROM table_name
WHERE column_name IN (SELECT STATEMENT);

Example:
SELECT * FROM Customers
WHERE Country IN ('Germany', 'France', 'UK');


Example:
SELECT * FROM Customers
WHERE Country NOT IN ('Germany', 'France', 'UK');


Example:
SELECT * FROM Customers
WHERE Country IN (SELECT Country FROM Suppliers);


		7.)The SQL BETWEEN Operator

#BETWEEN Syntax
SELECT column_name(s)
FROM table_name
WHERE column_name BETWEEN value1 AND value2;


Example:
SELECT * FROM Products
WHERE Price NOT BETWEEN 10 AND 20;

Example:
SELECT * FROM Products
WHERE ProductName BETWEEN "Carnarvon Tigers" AND "Chef Anton's Cajun Seasoning"
ORDER BY ProductName;

Example:
SELECT * FROM Orders
WHERE OrderDate BETWEEN '1996-07-01' AND '1996-07-31';